services:
  web:
    build:
      dockerfile: ./Dockerfile
      context: ./
    container_name: web-django
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    develop:
      watch:
        - path: ./geoproject-django
          action: sync+restart
          target: /app
        - path: ./uv.lock
          action: rebuild
    env_file:
      - .env
    entrypoint: ["./prestart.sh"]
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    ports:
      - 8000:8000

  db:
    image: postgis/postgis:latest
    restart: unless-stopped
    shm_size: 128mb
    container_name: postgres-postgis
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d
          ${DB_NAME}'"]
        interval: 5s
        timeout: 5s
        retries: 5
  
  adminer:
    image: adminer
    ports: 
      - 8080:8080

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    ports:
      - 6379:6379

  celery_worker:
    build:
      context: ./
      dockerfile: ./Dockerfile
    container_name: celery-worker
    command: celery -A config.celery.app worker -l info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery_beat:
    build:
      context: ./
      dockerfile: ./Dockerfile
    container_name: celery-beat
    command: celery -A config.celery.app beat -l info
    depends_on:
      db:
        condition: service_healthy
      redis:
       condition: service_healthy
    stop_grace_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
  